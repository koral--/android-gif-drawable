plugins {
    id "pl.droidsonroids.ui.test" version "2.0.0"
}

apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'
apply from: 'gradle-mvn-push.gradle'

version = VERSION_NAME
group = GROUP

android {
    compileSdkVersion versions.compileSdk

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        versionName project.version
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        consumerProguardFiles 'consumer-proguard-rules.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-$versions.minSdk", "-DANDROID_STL=none"
                cFlags '-std=c11', '-Weverything', '-Wall'
                if (isDebugBuild()) {
                    cFlags '-DDEBUG', '-g'
                } else {
                    cFlags '-DNDEBUG', '-Os', '-g0', '-fvisibility=hidden'
                }
            }
        }
    }
    externalNativeBuild {
        cmake {
            path 'src/main/c/CMakeLists.txt'
        }
    }
    testBuildType 'release'
    signingConfigs {
        release {
            storeFile new File("$System.env.HOME/.android/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            if (isDebugBuild()) {
                debuggable true
                jniDebuggable true
            }
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compileOnly "androidx.annotation:annotation:$versions.androidxAnnotations"
    testCompileOnly "androidx.annotation:annotation:$versions.androidxAnnotations"
    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    testImplementation "org.assertj:assertj-core:$versions.assertj3"
    testImplementation "net.jodah:concurrentunit:$versions.concurrentunit"
    testImplementation "org.khronos:opengl-api:$versions.openglApi"
    androidTestImplementation "junit:junit:$versions.junit"
    androidTestImplementation "org.assertj:assertj-core:$versions.assertj1"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidXextJunit"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
    androidTestImplementation "androidx.test:rules:$versions.androidxTest"
    androidTestImplementation "androidx.test:runner:$versions.androidxTest"
    androidTestCompileOnly "androidx.annotation:annotation:$versions.androidxAnnotations"
}

def isDebugBuild() {
    !gradle.startParameter.taskNames.contains("uploadArchives") && VERSION_NAME.contains("SNAPSHOT")
}

task archiveSymbols(type: Tar) {
    from new File(buildDir, 'intermediates/cmake/release/obj')
    baseName = "$POM_ARTIFACT_ID-symbols"
    destinationDir = new File(buildDir, 'libs')
    extension = 'tar.gz'
    compression = Compression.GZIP
}