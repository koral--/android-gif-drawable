apply plugin: 'com.android.library'
apply plugin: 'org.shipkit.bintray'
apply plugin: 'org.shipkit.android-publish'

androidPublish.artifactId = 'android-gif-drawable'
group = 'pl.droidsonroids.gif'
description = 'Views and Drawable for displaying animated GIFs for Android'

android {
    ndkVersion versions.ndk
    compileSdkVersion versions.compileSdk

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        consumerProguardFiles 'consumer-proguard-rules.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-$versions.minSdk", "-DANDROID_STL=none"
                cFlags '-std=c11', '-Weverything', '-Wall'
                if (isDevelopmentBuild()) {
                    cFlags '-DDEBUG', '-g'
                } else {
                    cFlags '-DNDEBUG', '-Os', '-g0', '-fvisibility=hidden'
                }
            }
        }
    }
    externalNativeBuild {
        cmake {
            path 'src/main/c/CMakeLists.txt'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation "pl.droidsonroids:relinker:$versions.relinker"
    compileOnly "androidx.annotation:annotation:$versions.androidxAnnotations"
    testCompileOnly "androidx.annotation:annotation:$versions.androidxAnnotations"
    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    testImplementation "org.assertj:assertj-core:$versions.assertj3"
    testImplementation "net.jodah:concurrentunit:$versions.concurrentunit"
    testImplementation "org.khronos:opengl-api:$versions.openglApi"
    androidTestImplementation "junit:junit:$versions.junit"
    androidTestImplementation "org.assertj:assertj-core:$versions.assertj1"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidXextJunit"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
    androidTestImplementation "androidx.test:rules:$versions.androidxTest"
    androidTestImplementation "androidx.test:runner:$versions.androidxTest"
    androidTestCompileOnly "androidx.annotation:annotation:$versions.androidxAnnotations"
}

def isDevelopmentBuild() {
    return project.findProperty('android.injected.invoked.from.ide') == 'true'
}

task archiveSymbols(type: Tar) {
    from new File(buildDir, 'intermediates/cmake/release/obj')
    archiveBaseName = "${project.archivesBaseName}-symbols"
    destinationDirectory = new File(buildDir, 'libs')
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}
